#!/usr/bin/env python3
"""GitHub Insights - Main entry point."""

import argparse
import os
import sys
from typing import List, Optional

from . import __version__
from .github_api import GitHubAPI
from .report import generate_markdown_report, save_report


def parse_arguments(args: List[str]) -> argparse.Namespace:
    """Parse command line arguments.
    
    Args:
        args: List of command line arguments
        
    Returns:
        Parsed arguments
    """
    parser = argparse.ArgumentParser(
        description="GitHub Insights - Fetch and analyze GitHub repository statistics"
    )
    
    parser.add_argument(
        "username",
        help="GitHub username or organization name"
    )
    
    parser.add_argument(
        "--token",
        help="GitHub Personal Access Token (default: reads from GITHUB_TOKEN env var)"
    )
    
    parser.add_argument(
        "--output",
        "-o",
        default="github_insights_report.md",
        help="Output filename (default: github_insights_report.md)"
    )
    
    parser.add_argument(
        "--create-issue",
        action="store_true",
        help="Create an issue if a repo has more than 20 open issues"
    )
    
    parser.add_argument(
        "--version",
        action="version",
        version=f"%(prog)s {__version__}",
        help="Show version and exit"
    )
    
    return parser.parse_args(args)


def main() -> None:
    """Main entry point for the GitHub Insights tool."""
    args = parse_arguments(sys.argv[1:])
    
    try:
        # Initialize GitHub API client
        github = GitHubAPI(token=args.token)
        
        print(f"Fetching repositories for {args.username}...")
        repos = github.get_user_repos(args.username)
        
        if not repos:
            print(f"No public repositories found for {args.username}")
            return
        
        print(f"Found {len(repos)} repositories. Collecting statistics...")
        
        # Get stats for each repository
        repos_data = []
        for repo in repos:
            try:
                owner = repo['owner']['login']
                repo_name = repo['name']
                print(f"- Processing {owner}/{repo_name}...")
                
                # Get repository statistics
                repo_stats = github.get_repo_stats(owner, repo_name)
                repos_data.append(repo_stats)
                
                # Create issue if requested and there are more than 20 open issues
                if args.create_issue and repo_stats['open_issues'] > 20:
                    issue_title = f"High number of open issues ({repo_stats['open_issues']})"
                    issue_body = (
                        f"This repository currently has {repo_stats['open_issues']} open issues. "
                        "Consider reviewing and addressing them when possible.\n\n"
                        "*This issue was automatically generated by GitHub Insights.*"
                    )
                    
                    print(f"  ⚠️  Creating issue about high number of open issues...")
                    issue = github.create_issue(owner, repo_name, issue_title, issue_body)
                    if issue:
                        print(f"  ✅ Issue created: {issue.get('html_url')}")
                
            except Exception as e:
                print(f"  ❌ Error processing {repo.get('full_name', 'unknown')}: {str(e)}")
        
        # Generate and save the report
        print("\nGenerating report...")
        report = generate_markdown_report(args.username, repos_data)
        save_report(report, args.output)
        
        print("\n✅ Report generation completed successfully!")
        
    except Exception as e:
        print(f"\n❌ An error occurred: {str(e)}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
